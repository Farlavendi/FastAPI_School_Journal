services:
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi
    restart: always
    ports:
      - "8000:8000"
    environment:
      APP_CONFIG__DB__URL: ${APP_CONFIG__DB__URL}
      APP_CONFIG__TASKIQ__URL: ${APP_CONFIG__TASKIQ__URL}
      APP_CONFIG__GUNICORN__HOST: ${APP_CONFIG__GUNICORN__HOST}
      APP_CONFIG__GUNICORN__PORT: ${APP_CONFIG__GUNICORN__PORT}
      APP_CONFIG__GUNICORN__WORKERS: ${APP_CONFIG__GUNICORN__WORKERS}
      APP_CONFIG__GUNICORN__TIMEOUT: ${APP_CONFIG__GUNICORN__TIMEOUT}
      APP_CONFIG__MAILING__HOST: ${APP_CONFIG__MAILING__HOST}
      APP_CONFIG__MAILING__PORT: ${APP_CONFIG__MAILING__PORT}
      APP_CONFIG__MAILING__TZ: ${APP_CONFIG__MAILING__TZ}
      APP_CONFIG__REDIS__HOST: ${APP_CONFIG__REDIS__HOST}
      APP_CONFIG__REDIS__PORT: ${APP_CONFIG__REDIS__PORT}
      APP_CONFIG__REDIS__USERNAME: ${APP_CONFIG__REDIS__USERNAME}
      APP_CONFIG__REDIS__USER_PASSWORD: ${APP_CONFIG__REDIS__USER_PASSWORD}
      APP_CONFIG__REDIS__PASSWORD: ${APP_CONFIG__REDIS__PASSWORD}
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    develop:
      watch:
        - path: ./src
          action: sync+restart
          target: /app/src
  
  postgres-dev:
    image: postgres:17.2-alpine
    container_name: postgres-dev
    restart: always
    expose:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATA: /var/lib/postgresql/data
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 5s
      retries: 5

  #  postgres-test:
  #    image: postgres:17.2-alpine
  #    container_name: postgres-test
  #    restart: always
  #    volumes:
  #      - postgres-test-data:/var/lib/postgresql/data
  #    environment:
  #      POSTGRES_DB: ${POSTGRES_TEST_DB}
  #      POSTGRES_USER: ${POSTGRES_TEST_USER}
  #      POSTGRES_PASSWORD: ${POSTGRES_TEST_PASSWORD}
  #      POSTGRES_DATA: /var/lib/postgresql/data
  #    ports:
  #      - "5432:5432"
  #    healthcheck:
  #      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_TEST_USER} -d ${POSTGRES_TEST_DB}'" ]
  #      interval: 10s
  #      timeout: 5s
  #      retries: 5

  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics --quiet check_running
        &&
        rabbitmq-diagnostics --quiet check_local_alarms
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  maildev:
    image: maildev/maildev
    container_name: maildev
    environment:
      APP_CONFIG__MAILING__HOST: ${APP_CONFIG__MAILING__HOST}
      APP_CONFIG__MAILING__PORT: ${APP_CONFIG__MAILING__PORT}
      APP_CONFIG__MAILING__TZ: ${APP_CONFIG__MAILING__TZ}
    ports:
      - "8080:1080"
      - "1025:1025"
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

  taskiq:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taskiq
    restart: always
    environment:
      APP_CONFIG__DB__URL: ${APP_CONFIG__DB__URL}
      APP_CONFIG__TASKIQ__URL: ${APP_CONFIG__TASKIQ__URL}
      APP_CONFIG__GUNICORN__HOST: ${APP_CONFIG__GUNICORN__HOST}
      APP_CONFIG__GUNICORN__PORT: ${APP_CONFIG__GUNICORN__PORT}
      APP_CONFIG__GUNICORN__WORKERS: ${APP_CONFIG__GUNICORN__WORKERS}
      APP_CONFIG__GUNICORN__TIMEOUT: ${APP_CONFIG__GUNICORN__TIMEOUT}
      APP_CONFIG__MAILING__HOST: ${APP_CONFIG__MAILING__HOST}
      APP_CONFIG__MAILING__PORT: ${APP_CONFIG__MAILING__PORT}
      APP_CONFIG__MAILING__TZ: ${APP_CONFIG__MAILING__TZ}
      APP_CONFIG__REDIS__HOST: ${APP_CONFIG__REDIS__HOST}
      APP_CONFIG__REDIS__PORT: ${APP_CONFIG__REDIS__PORT}
      APP_CONFIG__REDIS__USERNAME: ${APP_CONFIG__REDIS__USERNAME}
      APP_CONFIG__REDIS__USER_PASSWORD: ${APP_CONFIG__REDIS__USER_PASSWORD}
      APP_CONFIG__REDIS__PASSWORD: ${APP_CONFIG__REDIS__PASSWORD}
    volumes:
      - ./src:/app/src
    command: >
      taskiq worker src.core.taskiq:broker
      --no-configure-logging
      --fs-discover
      --tasks-pattern "**/tasks"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-dev:
        condition: service_healthy

  redis:
    image: redis:8
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      APP_CONFIG__REDIS__HOST: ${APP_CONFIG__REDIS__HOST}
      APP_CONFIG__REDIS__PORT: ${APP_CONFIG__REDIS__PORT}
      APP_CONFIG__REDIS__USERNAME: ${APP_CONFIG__REDIS__USERNAME}
      APP_CONFIG__REDIS__USER_PASSWORD: ${APP_CONFIG__REDIS__USER_PASSWORD}
      APP_CONFIG__REDIS__PASSWORD: ${APP_CONFIG__REDIS__PASSWORD}
    command: >
      sh -c "
        mkdir -p /usr/local/etc/redis &&
        echo 'bind 0.0.0.0' > /usr/local/etc/redis/redis.conf &&
        echo 'requirepass $APP_CONFIG__REDIS__PASSWORD' >> /usr/local/etc/redis/redis.conf &&
        echo 'appendonly yes' >> /usr/local/etc/redis/redis.conf &&
        echo 'appendfsync everysec' >> /usr/local/etc/redis/redis.conf &&
        echo 'user default on nopass ~* +@all' > /usr/local/etc/redis/users.acl &&
        echo \"user $APP_CONFIG__REDIS__USERNAME on >$APP_CONFIG__REDIS__USER_PASSWORD ~* +@all\" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      "
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$APP_CONFIG__REDIS__PASSWORD", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "5540:5540"
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

volumes:
  postgres-dev-data:
  rabbitmq-data:
  redis-data:
#  postgres-test-data: